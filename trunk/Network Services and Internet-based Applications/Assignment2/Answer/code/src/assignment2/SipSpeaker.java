package assignment2;

import assignment2.audio.Text2Wav;
import assignment2.sip.SipServer;
import assignment2.web.HttpServer;

import java.io.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.Properties;

/**
 * Created by IntelliJ IDEA.
 * User: Sike Huang
 * Date: 2008-4-19
 * Time: 22:35:19
 * To change this template use File | Settings | File Templates.
 */
public class SipSpeaker {
    public static final Logger logger = Logger.getLogger(SipSpeaker.class.getName());

    // If the user chooses to delete the current message a default should exist.
    private static String defaultCfgFile = "sipspeaker.cfg";

    private static boolean canUseDeaultWav = true;
    private static String defaultText = "this is a default message generated by application";

    private static boolean hasCfgFile = true;

    private static String defaultWav = "default.wav";
    private static String messageWav = "currentmessage.wav";
    private static String messageText = "Welcome to the SIP Speaker this is my own answering machine. You have no new message.";
    private static String sipInterface = "0.0.0.0";
    private static int sipPort = 1014;
    private static String sipUser = "robot";
    private static String httpInterface = "127.0.0.1";
    private static int httpPort = 8080;

    private static Properties prop = new Properties();

    public SipSpeaker() {
        logger.setLevel(Level.ALL);
    }

    public static String getWavToPlay() {
        if (canUseDeaultWav) {
            return defaultWav;
        } else {
            return messageWav;
        }
    }

    public synchronized static void setMessageText(String text) {
        if (text.equals("")) {
            canUseDeaultWav = true;
        } else {
            canUseDeaultWav = false;
            messageText = text;
            logger.info("generating message wav...  | content-> " + messageText);
            Text2Wav.text2wav(messageText, messageWav);
            if (hasCfgFile) {
                logger.info("writing content back to cfg file: " + defaultCfgFile);
                prop.setProperty("message_text", text);
            }
        }
    }

    public static String getMessageText() {
        if (canUseDeaultWav) {
            return "N/A, since using default wav";
        } else {
            return messageText;
        }
    }

    private void initCfg(String configFileName, String sipUri, String httpBindAddress) {
//        Properties prop = new Properties();
        InputStream in = getFileInputStream(configFileName);
        if (in == null) {
            hasCfgFile = false;
            // robot@127.0.0.1:5064
            logger.info("config_file: " + configFileName + " doesn't exist");
            if (sipUri != null) {
                parseSipUri(sipUri);
            }
            if (httpBindAddress != null) {
                // 127.0.0.1:8080
                // TODO or 8080 or myserver.mydomain.se
                parseHttpBindAddress(httpBindAddress);
            }
            return;
        }
        try {
            logger.info("reading config_file: " + configFileName);
            prop.load(in);
            defaultCfgFile = configFileName;
            String defaultWavInCfg = prop.getProperty("default_message");
            // If the file wav-file specified here for the default doesn't
            // exist or if the configuration file doesn't exist a default file should be created
            // on start of the application.
            if (getFileInputStream(defaultWavInCfg) == null) {
                generateDefaultWav();
            } else {
                defaultWav = defaultWavInCfg;
            }
            messageWav = prop.getProperty("message_wav", messageWav);
            String messageTextInCfg = prop.getProperty("message_text");
            // If the message is deleted in the web interface, the text in the configuration file should be an empty string.
            if (messageTextInCfg.equals("")) {
                canUseDeaultWav = true;
            } else {
                messageText = messageTextInCfg;
                canUseDeaultWav = false;
            }

            if (sipUri != null) {
                // robot@127.0.0.1:5064
                parseSipUri(sipUri);
            } else {
                sipUser = prop.getProperty("sip_user", sipUser);
                sipInterface = prop.getProperty("sip_interface", sipInterface);
                sipPort = Integer.parseInt(prop.getProperty("sip_port", String.valueOf(sipPort)));
            }

            if (httpBindAddress != null) {
                // 127.0.0.1:8080
                // TODO or 8080 or myserver.mydomain.se
                parseHttpBindAddress(httpBindAddress);
            } else {
                httpInterface = prop.getProperty("http_interface", httpInterface);
                httpPort = Integer.parseInt(prop.getProperty("http_port", String.valueOf(httpPort)));
            }


        } catch (IOException e) {
            logger.info("file: " + configFileName + " can't be loaded as a config_file");
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

    }

    private void parseHttpBindAddress(String httpBindAddress) {
        String[] tmpStr2 = httpBindAddress.split(":");
        httpInterface = tmpStr2[0];
        httpPort = Integer.parseInt(tmpStr2[1]);
    }

    private void parseSipUri(String sipUri) {
        String[] tmpStrs = sipUri.split("@");
        sipUser = tmpStrs[0];
        String[] tmpStrs1 = tmpStrs[1].split(":");
        sipInterface = tmpStrs1[0];
        sipPort = Integer.parseInt(tmpStrs1[1]);
    }

    private InputStream getFileInputStream(String fileName) {
        InputStream in = null;
        try {
            in = new FileInputStream("./" + fileName);
        } catch (FileNotFoundException e) {
            logger.info("can't find file: " + fileName);
//            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        return in;
    }

    private void generateDefaultWav() {
        logger.info("generating default wav...");
        Text2Wav.text2wav(defaultText, "default.wav");
    }

    public static void main(String[] args) {
        String configFileName = null;
        String sipUri = null;
        String httpBindAddress = null;
        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-c")) {
                configFileName = args[i + 1];
            }
            if (args[i].equals("-user")) {
                sipUri = args[i + 1];
            }
            if (args[i].equals("-http")) {
                httpBindAddress = args[i + 1];
            }
        }
        if (configFileName == null) {
            configFileName = defaultCfgFile;
        }

        SipSpeaker sipSpeaker = new SipSpeaker();
        sipSpeaker.initCfg(configFileName, sipUri, httpBindAddress);
        String wavToPlay = null;
        if (canUseDeaultWav) {
            logger.info("launch sip_sever with default_message");
            wavToPlay = defaultWav;
        } else {
            logger.info("launch sip_sever with current_message");
            wavToPlay = messageWav;
        }
        logger.info("sipUri: " + sipUser + "@" + sipInterface + ":" + sipPort);
        logger.info("httpBindAddress: " + httpInterface + ":" + httpPort);

        HttpServer httpServer = new HttpServer();
        httpServer.init(httpInterface, httpPort);

        SipServer.init(sipUser, sipInterface, sipPort);


    }
}
